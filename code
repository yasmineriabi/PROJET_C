#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

// Définition de la structure pour un élément de la liste chaînée
struct Node {
    char data[100]; 
    struct Node* next;
};
// Fonction pour ajouter un nouvel élément à la liste chaînée
struct Node* addNode(struct Node* head, const char* data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Erreur lors de l'allocation de mémoire.\n");
        exit(1);
    }
   strncpy(newNode->data, data, sizeof(newNode->data) - 1);
    newNode->data[sizeof(newNode->data) - 1] = '\0'; 
    newNode->next = head;
    return newNode;
}

// Fonction pour afficher les éléments de la liste chaînée
void displayList(struct Node* head) {
    struct Node* current = head;
    while (current != NULL) {
        printf("%s -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}
// ieme element 
char* getIthElementData(struct Node* head, int index) {
    struct Node* current = head;
    int count = 0;

    while (current != NULL) {
        if (count == index) {
            return current->data;
        }
        count++;
        current = current->next;
    }

    
    fprintf(stderr, "Index out of bounds.\n");
    exit(EXIT_FAILURE);
}

   


// Supprimer le i-ème élément de la liste chaînée
struct Node* deleteIthElement(struct Node* head, int index) {
    if (head == NULL) {
        printf("Liste vide.\n");
        return NULL;
    }

    if (index == 0) {
        struct Node* newHead = head->next;
        free(head);
        return newHead;
    }

    struct Node* current = head;
    int count = 0;

    while (current != NULL) {
        if (count == index - 1) {
            struct Node* nodeToDelete = current->next;
            if (nodeToDelete != NULL) {
                current->next = nodeToDelete->next;
                free(nodeToDelete);
            }
            break;
        }

        count++;
        current = current->next;
    }

    return head;
}
// Chercher l'indice d'une chaîne dans la liste chaînée
int findIndex(struct Node* head, const char* target) {
    struct Node* current = head;
    int index = 0;

    while (current != NULL) {
        if (strcmp(current->data, target) == 0) {
            return index;
        }

        index++;
        current = current->next;
    }

    // Si la chaîne n'est pas trouvée dans la liste
    return -1;
}
// Fonction pour changer la valeur du i-ème nœud
    void changeNodeValue(struct Node* head, int index, char* newValue) {
    int currentIndex = 0;
    struct Node* current = head;
    while (current != NULL && currentIndex < index) {
        current = current->next;
        currentIndex++;
    }
 if (current != NULL) {
        strncpy(current->data, newValue, sizeof(current->data) - 1);
        current->data[sizeof(current->data) - 1] = '\0'; // 
    } else {
        fprintf(stderr, "Index hors limites.\n");
    }
}

int main() {
    //initialisation des listes de stockage
    struct Node* liste_voiture_matricule=NULL;
    struct Node* liste_description=NULL;
    struct Node* liste_etat=NULL;
    struct Node* liste_historique=NULL;
    //ajouter des voitures au systeme
    printf("est-ce que vous voulez ajouter des voitures au systeme si oui tapez 1 si non tapez 0 ");
    int n ;
    scanf("%d",&n);
    if (n==1){
        int x;
        printf("donnez le nombre de voitures à ajouter");
        scanf("%d",&x);
        for (int i=0;i<x;i++){
            char ch,ch1,ch2 [100];
            printf("donnez la voiture+matricule sous la forme voiture***matricule");
            gets(ch);
            liste_voiture_matricule=addNode(liste_voiture_matricule,ch);
            printf("donnez la description de la voiture");
            gets(ch1);
            liste_description=addNode(liste_description,ch1);
            printf("donnez l etat de la voiture");
            gets(ch2);
            liste_etat=addNode(liste_etat,ch2);
        }}
        //louer une voiture
        
        int y;
        printf("voulez vous louer une voiture si oui tapez 1 si non tapez 0");
        scanf("%d",&y);
        if(y==1){
        printf("veuillez choisir une voiture parmi  les suivantes:\n");
        displayList(liste_voiture_matricule);
        char rep [100];
        printf("donner la voiture choisie sous la forme voiture***matricule:");
         gets(rep);int bool_var = 1;
         while (bool_var){
        
        if ((findIndex(liste_historique, rep))!=-1){
            char date [100];
        printf("donner date debut de location date fin de location sous la forme jj-mm-aa***jj-mm-aa");
            gets(date);
            int index=findIndex(liste_historique, rep);
            char* data= getIthElementData(liste_historique,index + 1);
            if(strcmp(date,data) == 0){
                printf("la voiture n'est pas disponible");
            }
            else{char date1 [100];
                printf("changer date selon la date ci dessous si ce n' est pas possible tapez non\n");
                printf(data);
                gets(date1);
                if(strcmp(date1, "non") != 0){
                liste_historique=addNode(liste_historique,rep);
               liste_historique=addNode(liste_historique,date1);
               bool_var=0;}
               
        }
         }
         else{
        char date2[100];
         printf("donnez date:");
         gets(date2);
             liste_historique=addNode(liste_historique,rep);
               liste_historique=addNode(liste_historique,date2);
               bool_var=0;
             
         }
         }}
    //afficher la description d une voiture
    printf("donner la voiture dont vous voulez la descriptions parmi les suivantes sous la forme voiture***matricule:");
    displayList(liste_voiture_matricule);
    char rep1 [100];
    gets(rep1);
    int s1 =findIndex(liste_voiture_matricule,rep1);
    char* data1= getIthElementData(liste_description,s1);
   char* res=data1;
    puts(res);
    
    // supprimer une voiture en panne
    printf("donnez la voiture en panne sous la forme voiture***matricule:");
    char rep2 [100];
    gets(rep2);
    int s2 =findIndex(liste_voiture_matricule,rep2);
    liste_voiture_matricule=deleteIthElement(liste_voiture_matricule,s2);
    //changer la descripton et l etat de la voiture
    printf ("donnez la voiture que vous voulez changer l etat et la description sous la forme voiture***matricule parmi les suivantes:");
    displayList(liste_voiture_matricule);
    char reps [100];char rept [100]; char repu [100];
    gets(reps);int s3;
    s3 = findIndex(liste_voiture_matricule,reps);
    printf ("donnez la nouvelle description:");
    gets(rept);
    printf("donnez le nouvel etat:");
    gets(repu);
    changeNodeValue(liste_description, s3, rept);
    changeNodeValue(liste_etat, s3, repu);
    //afficher  l historique de location
    printf("vous trouvez ci-joint l'historique des locations détaillé:");
    displayList(liste_historique);
    //retour d une voiture en cas de reclamation
    printf("donner la voiture en panne:");
    char rep4 [100];
    gets(rep4);
    int s4 =findIndex(liste_voiture_matricule,rep4);
    changeNodeValue(liste_etat, s3, "panne");
    
    
    
    
    
    
        
    
            
        
        return 0;}
